package gameboy

import (
	"golang.org/x/xerrors"
)

// TODO(velovix): Document what instructions do to flags

// instruction is a function that runs microcode for a CPU instruction and may
// return either another instruction function for the next microcode or nil
// indicating that the instruction has finished. Each microcode takes 4 CPU
// cycles to complete.
type instruction func(*State) int

type opcodeMapper struct {
	state *State

	// A lookup table that links opcodes to the corresponding instructions.
	mainOps *[0x100]instruction
	// A lookup table that links opcodes to CB instructions.
	cbOps *[0x100]instruction
}

func newOpcodeMapper(state *State) *opcodeMapper {
	mapper := &opcodeMapper{}

	mapper.state = state
	mapper.generateMap()

	return mapper
}

// runOpcode runs the operation that maps to the given opcode.
func (mapper *opcodeMapper) run(opcode uint8) (cycles int, err error) {
	if opcode == 0xCB {
		return mapper.cbOpcodeDispatcher(), nil
	}

	instr := mapper.mainOps[opcode]
	if instr == nil {
		return 0, xerrors.Errorf("unknown opcode %#x", opcode)
	}
	return instr(mapper.state), nil
}

// cbOpcodeDispatcher pops the next opcode from the program counter and
// dispatches the corresponding CB instruction.
func (mapper *opcodeMapper) cbOpcodeDispatcher() int {
	cbOpcode := mapper.state.incrementPC()

	instr := mapper.cbOps[cbOpcode]
	return instr(mapper.state)
}

// getConditionalStr creates a string representation of a conditional flag
// check.
func getConditionalStr(flagMask uint8, isSet bool) string {
	var conditional string
	switch flagMask {
	case zeroFlag:
		conditional = "Z"
	case carryFlag:
		conditional = "C"
	default:
		panic("unsupported JR conditional flag")
	}
	if !isSet {
		conditional = "N" + conditional
	}

	return conditional
}

func (mapper *opcodeMapper) generateMap() {
	mapper.mainOps = &[0x100]instruction{
		0x00: nop,
		0x01: makeLD16BitImm(mapper.state.regBC),
		0x02: makeLDToMem(mapper.state.regBC, mapper.state.regA),
		0x03: makeINC16Bit(mapper.state.regBC),
		0x04: makeINC8Bit(mapper.state.regB),
		0x05: makeDEC8Bit(mapper.state.regB),
		0x06: makeLD8BitImm(mapper.state.regB),
		0x07: rlca,
		0x08: ldSPToMem,
		0x09: makeADDToHL(mapper.state.regBC),
		0x0A: makeLDFromMem(mapper.state.regA, mapper.state.regBC),
		0x0B: makeDEC16Bit(mapper.state.regBC),
		0x0C: makeINC8Bit(mapper.state.regC),
		0x0D: makeDEC8Bit(mapper.state.regC),
		0x0E: makeLD8BitImm(mapper.state.regC),
		0x0F: rrca,
		0x10: stop,
		0x11: makeLD16BitImm(mapper.state.regDE),
		0x12: makeLDToMem(mapper.state.regDE, mapper.state.regA),
		0x13: makeINC16Bit(mapper.state.regDE),
		0x14: makeINC8Bit(mapper.state.regD),
		0x15: makeDEC8Bit(mapper.state.regD),
		0x16: makeLD8BitImm(mapper.state.regD),
		0x17: rla,
		0x18: jr,
		0x19: makeADDToHL(mapper.state.regDE),
		0x1A: makeLDFromMem(mapper.state.regA, mapper.state.regDE),
		0x1B: makeDEC16Bit(mapper.state.regDE),
		0x1C: makeINC8Bit(mapper.state.regE),
		0x1D: makeDEC8Bit(mapper.state.regE),
		0x1E: makeLD8BitImm(mapper.state.regE),
		0x1F: rra,
		0x20: makeJRIfFlag(zeroFlag, false),
		0x21: makeLD16BitImm(mapper.state.regHL),
		0x22: makeLDIToMem,
		0x23: makeINC16Bit(mapper.state.regHL),
		0x24: makeINC8Bit(mapper.state.regH),
		0x25: makeDEC8Bit(mapper.state.regH),
		0x26: makeLD8BitImm(mapper.state.regH),
		0x27: daa,
		0x28: makeJRIfFlag(zeroFlag, true),
		0x29: makeADDToHL(mapper.state.regHL),
		0x2A: ldiFromMem,
		0x2B: makeDEC16Bit(mapper.state.regHL),
		0x2C: makeINC8Bit(mapper.state.regL),
		0x2D: makeDEC8Bit(mapper.state.regL),
		0x2E: makeLD8BitImm(mapper.state.regL),
		0x2F: cpl,
		0x30: makeJRIfFlag(carryFlag, false),
		0x31: makeLD16BitImm(mapper.state.regSP),
		0x32: makeLDDToMem,
		0x33: makeINC16Bit(mapper.state.regSP),
		0x34: incMemHL,
		0x35: decMemHL,
		0x36: makeLD8BitImmToMemHL,
		0x37: scf,
		0x38: makeJRIfFlag(carryFlag, true),
		0x39: makeADDToHL(mapper.state.regSP),
		0x3A: lddFromMem,
		0x3B: makeDEC16Bit(mapper.state.regSP),
		0x3C: makeINC8Bit(mapper.state.regA),
		0x3D: makeDEC8Bit(mapper.state.regA),
		0x3E: makeLD8BitImm(mapper.state.regA),
		0x3F: ccf,
		0x40: makeLD(mapper.state.regB, mapper.state.regB),
		0x41: makeLD(mapper.state.regB, mapper.state.regC),
		0x42: makeLD(mapper.state.regB, mapper.state.regD),
		0x43: makeLD(mapper.state.regB, mapper.state.regE),
		0x44: makeLD(mapper.state.regB, mapper.state.regH),
		0x45: makeLD(mapper.state.regB, mapper.state.regL),
		0x46: makeLDFromMem(mapper.state.regB, mapper.state.regHL),
		0x47: makeLD(mapper.state.regB, mapper.state.regA),
		0x48: makeLD(mapper.state.regC, mapper.state.regB),
		0x49: makeLD(mapper.state.regC, mapper.state.regC),
		0x4A: makeLD(mapper.state.regC, mapper.state.regD),
		0x4B: makeLD(mapper.state.regC, mapper.state.regE),
		0x4C: makeLD(mapper.state.regC, mapper.state.regH),
		0x4D: makeLD(mapper.state.regC, mapper.state.regL),
		0x4E: makeLDFromMem(mapper.state.regC, mapper.state.regHL),
		0x4F: makeLD(mapper.state.regC, mapper.state.regA),
		0x50: makeLD(mapper.state.regD, mapper.state.regB),
		0x51: makeLD(mapper.state.regD, mapper.state.regC),
		0x52: makeLD(mapper.state.regD, mapper.state.regD),
		0x53: makeLD(mapper.state.regD, mapper.state.regE),
		0x54: makeLD(mapper.state.regD, mapper.state.regH),
		0x55: makeLD(mapper.state.regD, mapper.state.regL),
		0x56: makeLDFromMem(mapper.state.regD, mapper.state.regHL),
		0x57: makeLD(mapper.state.regD, mapper.state.regA),
		0x58: makeLD(mapper.state.regE, mapper.state.regB),
		0x59: makeLD(mapper.state.regE, mapper.state.regC),
		0x5A: makeLD(mapper.state.regE, mapper.state.regD),
		0x5B: makeLD(mapper.state.regE, mapper.state.regE),
		0x5C: makeLD(mapper.state.regE, mapper.state.regH),
		0x5D: makeLD(mapper.state.regE, mapper.state.regL),
		0x5E: makeLDFromMem(mapper.state.regE, mapper.state.regHL),
		0x5F: makeLD(mapper.state.regE, mapper.state.regA),
		0x60: makeLD(mapper.state.regH, mapper.state.regB),
		0x61: makeLD(mapper.state.regH, mapper.state.regC),
		0x62: makeLD(mapper.state.regH, mapper.state.regD),
		0x63: makeLD(mapper.state.regH, mapper.state.regE),
		0x64: makeLD(mapper.state.regH, mapper.state.regH),
		0x65: makeLD(mapper.state.regH, mapper.state.regL),
		0x66: makeLDFromMem(mapper.state.regH, mapper.state.regHL),
		0x67: makeLD(mapper.state.regH, mapper.state.regA),
		0x68: makeLD(mapper.state.regL, mapper.state.regB),
		0x69: makeLD(mapper.state.regL, mapper.state.regC),
		0x6A: makeLD(mapper.state.regL, mapper.state.regD),
		0x6B: makeLD(mapper.state.regL, mapper.state.regE),
		0x6C: makeLD(mapper.state.regL, mapper.state.regH),
		0x6D: makeLD(mapper.state.regL, mapper.state.regL),
		0x6E: makeLDFromMem(mapper.state.regL, mapper.state.regHL),
		0x6F: makeLD(mapper.state.regL, mapper.state.regA),
		0x70: makeLDToMem(mapper.state.regHL, mapper.state.regB),
		0x71: makeLDToMem(mapper.state.regHL, mapper.state.regC),
		0x72: makeLDToMem(mapper.state.regHL, mapper.state.regD),
		0x73: makeLDToMem(mapper.state.regHL, mapper.state.regE),
		0x74: makeLDToMem(mapper.state.regHL, mapper.state.regH),
		0x75: makeLDToMem(mapper.state.regHL, mapper.state.regL),
		0x76: halt,
		0x77: makeLDToMem(mapper.state.regHL, mapper.state.regA),
		0x78: makeLD(mapper.state.regA, mapper.state.regB),
		0x79: makeLD(mapper.state.regA, mapper.state.regC),
		0x7A: makeLD(mapper.state.regA, mapper.state.regD),
		0x7B: makeLD(mapper.state.regA, mapper.state.regE),
		0x7C: makeLD(mapper.state.regA, mapper.state.regH),
		0x7D: makeLD(mapper.state.regA, mapper.state.regL),
		0x7E: makeLDFromMem(mapper.state.regA, mapper.state.regHL),
		0x7F: makeLD(mapper.state.regA, mapper.state.regA),
		0x80: makeADD(mapper.state.regB),
		0x81: makeADD(mapper.state.regC),
		0x82: makeADD(mapper.state.regD),
		0x83: makeADD(mapper.state.regE),
		0x84: makeADD(mapper.state.regH),
		0x85: makeADD(mapper.state.regL),
		0x86: addFromMemHL,
		0x87: makeADD(mapper.state.regA),
		0x88: makeADC(mapper.state.regB),
		0x89: makeADC(mapper.state.regC),
		0x8A: makeADC(mapper.state.regD),
		0x8B: makeADC(mapper.state.regE),
		0x8C: makeADC(mapper.state.regH),
		0x8D: makeADC(mapper.state.regL),
		0x8E: adcFromMemHL,
		0x8F: makeADC(mapper.state.regA),
		0x90: makeSUB(mapper.state.regB),
		0x91: makeSUB(mapper.state.regC),
		0x92: makeSUB(mapper.state.regD),
		0x93: makeSUB(mapper.state.regE),
		0x94: makeSUB(mapper.state.regH),
		0x95: makeSUB(mapper.state.regL),
		0x96: subFromMemHL,
		0x97: makeSUB(mapper.state.regA),
		0x98: makeSBC(mapper.state.regB),
		0x99: makeSBC(mapper.state.regC),
		0x9A: makeSBC(mapper.state.regD),
		0x9B: makeSBC(mapper.state.regE),
		0x9C: makeSBC(mapper.state.regH),
		0x9D: makeSBC(mapper.state.regL),
		0x9E: sbcFromMemHL,
		0x9F: makeSBC(mapper.state.regA),
		0xA0: makeAND(mapper.state.regB),
		0xA1: makeAND(mapper.state.regC),
		0xA2: makeAND(mapper.state.regD),
		0xA3: makeAND(mapper.state.regE),
		0xA4: makeAND(mapper.state.regH),
		0xA5: makeAND(mapper.state.regL),
		0xA6: andFromMemHL,
		0xA7: makeAND(mapper.state.regA),
		0xA8: makeXOR(mapper.state.regB),
		0xA9: makeXOR(mapper.state.regC),
		0xAA: makeXOR(mapper.state.regD),
		0xAB: makeXOR(mapper.state.regE),
		0xAC: makeXOR(mapper.state.regH),
		0xAD: makeXOR(mapper.state.regL),
		0xAE: xorFromMemHL,
		0xAF: makeXOR(mapper.state.regA),
		0xB0: makeOR(mapper.state.regB),
		0xB1: makeOR(mapper.state.regC),
		0xB2: makeOR(mapper.state.regD),
		0xB3: makeOR(mapper.state.regE),
		0xB4: makeOR(mapper.state.regH),
		0xB5: makeOR(mapper.state.regL),
		0xB6: orFromMemHL,
		0xB7: makeOR(mapper.state.regA),
		0xB8: makeCP(mapper.state.regB),
		0xB9: makeCP(mapper.state.regC),
		0xBA: makeCP(mapper.state.regD),
		0xBB: makeCP(mapper.state.regE),
		0xBC: makeCP(mapper.state.regH),
		0xBD: makeCP(mapper.state.regL),
		0xBE: cpFromMemHL,
		0xBF: makeCP(mapper.state.regA),
		0xC0: makeRETIfFlag(zeroFlag, false),
		0xC1: makePOP(mapper.state.regBC),
		0xC2: makeJPIfFlag(zeroFlag, false),
		0xC3: jp,
		0xC4: makeCALLIfFlag(zeroFlag, false),
		0xC5: makePUSH(mapper.state.regBC),
		0xC6: add8BitImm,
		0xC7: makeRST(0x00),
		0xC8: makeRETIfFlag(zeroFlag, true),
		0xC9: ret,
		0xCA: makeJPIfFlag(zeroFlag, true),
		0xCB: nil, // Taken care of in a special case
		0xCC: makeCALLIfFlag(zeroFlag, true),
		0xCD: call,
		0xCE: adc8BitImm,
		0xCF: makeRST(0x08),
		0xD0: makeRETIfFlag(carryFlag, false),
		0xD1: makePOP(mapper.state.regDE),
		0xD2: makeJPIfFlag(carryFlag, false),
		0xD3: nil,
		0xD4: makeCALLIfFlag(carryFlag, false),
		0xD5: makePUSH(mapper.state.regDE),
		0xD6: sub8BitImm,
		0xD7: makeRST(0x10),
		0xD8: makeRETIfFlag(carryFlag, true),
		0xD9: reti,
		0xDA: makeJPIfFlag(carryFlag, true),
		0xDB: nil,
		0xDC: makeCALLIfFlag(carryFlag, true),
		0xDD: nil,
		0xDE: sbc8BitImm,
		0xDF: makeRST(0x18),
		0xE0: ldhToMem,
		0xE1: makePOP(mapper.state.regHL),
		0xE2: ldToMemC,
		0xE3: nil,
		0xE4: nil,
		0xE5: makePUSH(mapper.state.regHL),
		0xE6: and8BitImm,
		0xE7: makeRST(0x20),
		0xE8: addToSP,
		0xE9: jpToHL,
		0xEA: ldTo16BitImmMem,
		0xEB: nil,
		0xEC: nil,
		0xED: nil,
		0xEE: xor8BitImm,
		0xEF: makeRST(0x28),
		0xF0: ldhFromMem,
		0xF1: makePOP(mapper.state.regAF),
		0xF2: ldFromMemC,
		0xF3: di,
		0xF4: nil,
		0xF5: makePUSH(mapper.state.regAF),
		0xF6: or8BitImm,
		0xF7: makeRST(0x30),
		0xF8: ldhl,
		0xF9: ldHLToSP,
		0xFA: ldFrom16BitImmMem,
		0xFB: ei,
		0xFC: nil,
		0xFD: nil,
		0xFE: cp8BitImm,
		0xFF: makeRST(0x38),
	}

	mapper.cbOps = &[0x100]instruction{
		0x00: makeRLC(mapper.state.regB),
		0x01: makeRLC(mapper.state.regC),
		0x02: makeRLC(mapper.state.regD),
		0x03: makeRLC(mapper.state.regE),
		0x04: makeRLC(mapper.state.regH),
		0x05: makeRLC(mapper.state.regL),
		0x06: rlcMemHL,
		0x07: makeRLC(mapper.state.regA),
		0x08: makeRRC(mapper.state.regB),
		0x09: makeRRC(mapper.state.regC),
		0x0A: makeRRC(mapper.state.regD),
		0x0B: makeRRC(mapper.state.regE),
		0x0C: makeRRC(mapper.state.regH),
		0x0D: makeRRC(mapper.state.regL),
		0x0E: rrcMemHL,
		0x0F: makeRRC(mapper.state.regA),
		0x10: makeRL(mapper.state.regB),
		0x11: makeRL(mapper.state.regC),
		0x12: makeRL(mapper.state.regD),
		0x13: makeRL(mapper.state.regE),
		0x14: makeRL(mapper.state.regH),
		0x15: makeRL(mapper.state.regL),
		0x16: rlMemHL,
		0x17: makeRL(mapper.state.regA),
		0x18: makeRR(mapper.state.regB),
		0x19: makeRR(mapper.state.regC),
		0x1A: makeRR(mapper.state.regD),
		0x1B: makeRR(mapper.state.regE),
		0x1C: makeRR(mapper.state.regH),
		0x1D: makeRR(mapper.state.regL),
		0x1E: rrMemHL,
		0x1F: makeRR(mapper.state.regA),
		0x20: makeSLA(mapper.state.regB),
		0x21: makeSLA(mapper.state.regC),
		0x22: makeSLA(mapper.state.regD),
		0x23: makeSLA(mapper.state.regE),
		0x24: makeSLA(mapper.state.regH),
		0x25: makeSLA(mapper.state.regL),
		0x26: slaMemHL,
		0x27: makeSLA(mapper.state.regA),
		0x28: makeSRA(mapper.state.regB),
		0x29: makeSRA(mapper.state.regC),
		0x2A: makeSRA(mapper.state.regD),
		0x2B: makeSRA(mapper.state.regE),
		0x2C: makeSRA(mapper.state.regH),
		0x2D: makeSRA(mapper.state.regL),
		0x2E: sraMemHL,
		0x2F: makeSRA(mapper.state.regA),
		0x30: makeSWAP(mapper.state.regB),
		0x31: makeSWAP(mapper.state.regC),
		0x32: makeSWAP(mapper.state.regD),
		0x33: makeSWAP(mapper.state.regE),
		0x34: makeSWAP(mapper.state.regH),
		0x35: makeSWAP(mapper.state.regL),
		0x36: swapMemHL,
		0x37: makeSWAP(mapper.state.regA),
		0x38: makeSRL(mapper.state.regB),
		0x39: makeSRL(mapper.state.regC),
		0x3A: makeSRL(mapper.state.regD),
		0x3B: makeSRL(mapper.state.regE),
		0x3C: makeSRL(mapper.state.regH),
		0x3D: makeSRL(mapper.state.regL),
		0x3E: srlMemHL,
		0x3F: makeSRL(mapper.state.regA),
		0x40: makeBIT(0, mapper.state.regB),
		0x41: makeBIT(0, mapper.state.regC),
		0x42: makeBIT(0, mapper.state.regD),
		0x43: makeBIT(0, mapper.state.regE),
		0x44: makeBIT(0, mapper.state.regH),
		0x45: makeBIT(0, mapper.state.regL),
		0x46: makeBITMemHL(0),
		0x47: makeBIT(0, mapper.state.regA),
		0x48: makeBIT(1, mapper.state.regB),
		0x49: makeBIT(1, mapper.state.regC),
		0x4A: makeBIT(1, mapper.state.regD),
		0x4B: makeBIT(1, mapper.state.regE),
		0x4C: makeBIT(1, mapper.state.regH),
		0x4D: makeBIT(1, mapper.state.regL),
		0x4E: makeBITMemHL(1),
		0x4F: makeBIT(1, mapper.state.regA),
		0x50: makeBIT(2, mapper.state.regB),
		0x51: makeBIT(2, mapper.state.regC),
		0x52: makeBIT(2, mapper.state.regD),
		0x53: makeBIT(2, mapper.state.regE),
		0x54: makeBIT(2, mapper.state.regH),
		0x55: makeBIT(2, mapper.state.regL),
		0x56: makeBITMemHL(2),
		0x57: makeBIT(2, mapper.state.regA),
		0x58: makeBIT(3, mapper.state.regB),
		0x59: makeBIT(3, mapper.state.regC),
		0x5A: makeBIT(3, mapper.state.regD),
		0x5B: makeBIT(3, mapper.state.regE),
		0x5C: makeBIT(3, mapper.state.regH),
		0x5D: makeBIT(3, mapper.state.regL),
		0x5E: makeBITMemHL(3),
		0x5F: makeBIT(3, mapper.state.regA),
		0x60: makeBIT(4, mapper.state.regB),
		0x61: makeBIT(4, mapper.state.regC),
		0x62: makeBIT(4, mapper.state.regD),
		0x63: makeBIT(4, mapper.state.regE),
		0x64: makeBIT(4, mapper.state.regH),
		0x65: makeBIT(4, mapper.state.regL),
		0x66: makeBITMemHL(4),
		0x67: makeBIT(4, mapper.state.regA),
		0x68: makeBIT(5, mapper.state.regB),
		0x69: makeBIT(5, mapper.state.regC),
		0x6A: makeBIT(5, mapper.state.regD),
		0x6B: makeBIT(5, mapper.state.regE),
		0x6C: makeBIT(5, mapper.state.regH),
		0x6D: makeBIT(5, mapper.state.regL),
		0x6E: makeBITMemHL(5),
		0x6F: makeBIT(5, mapper.state.regA),
		0x70: makeBIT(6, mapper.state.regB),
		0x71: makeBIT(6, mapper.state.regC),
		0x72: makeBIT(6, mapper.state.regD),
		0x73: makeBIT(6, mapper.state.regE),
		0x74: makeBIT(6, mapper.state.regH),
		0x75: makeBIT(6, mapper.state.regL),
		0x76: makeBITMemHL(6),
		0x77: makeBIT(6, mapper.state.regA),
		0x78: makeBIT(7, mapper.state.regB),
		0x79: makeBIT(7, mapper.state.regC),
		0x7A: makeBIT(7, mapper.state.regD),
		0x7B: makeBIT(7, mapper.state.regE),
		0x7C: makeBIT(7, mapper.state.regH),
		0x7D: makeBIT(7, mapper.state.regL),
		0x7E: makeBITMemHL(7),
		0x7F: makeBIT(7, mapper.state.regA),
		0x80: makeRES(0, mapper.state.regB),
		0x81: makeRES(0, mapper.state.regC),
		0x82: makeRES(0, mapper.state.regD),
		0x83: makeRES(0, mapper.state.regE),
		0x84: makeRES(0, mapper.state.regH),
		0x85: makeRES(0, mapper.state.regL),
		0x86: makeRESMemHL(0),
		0x87: makeRES(0, mapper.state.regA),
		0x88: makeRES(1, mapper.state.regB),
		0x89: makeRES(1, mapper.state.regC),
		0x8A: makeRES(1, mapper.state.regD),
		0x8B: makeRES(1, mapper.state.regE),
		0x8C: makeRES(1, mapper.state.regH),
		0x8D: makeRES(1, mapper.state.regL),
		0x8E: makeRESMemHL(1),
		0x8F: makeRES(1, mapper.state.regA),
		0x90: makeRES(2, mapper.state.regB),
		0x91: makeRES(2, mapper.state.regC),
		0x92: makeRES(2, mapper.state.regD),
		0x93: makeRES(2, mapper.state.regE),
		0x94: makeRES(2, mapper.state.regH),
		0x95: makeRES(2, mapper.state.regL),
		0x96: makeRESMemHL(2),
		0x97: makeRES(2, mapper.state.regA),
		0x98: makeRES(3, mapper.state.regB),
		0x99: makeRES(3, mapper.state.regC),
		0x9A: makeRES(3, mapper.state.regD),
		0x9B: makeRES(3, mapper.state.regE),
		0x9C: makeRES(3, mapper.state.regH),
		0x9D: makeRES(3, mapper.state.regL),
		0x9E: makeRESMemHL(3),
		0x9F: makeRES(3, mapper.state.regA),
		0xA0: makeRES(4, mapper.state.regB),
		0xA1: makeRES(4, mapper.state.regC),
		0xA2: makeRES(4, mapper.state.regD),
		0xA3: makeRES(4, mapper.state.regE),
		0xA4: makeRES(4, mapper.state.regH),
		0xA5: makeRES(4, mapper.state.regL),
		0xA6: makeRESMemHL(4),
		0xA7: makeRES(4, mapper.state.regA),
		0xA8: makeRES(5, mapper.state.regB),
		0xA9: makeRES(5, mapper.state.regC),
		0xAA: makeRES(5, mapper.state.regD),
		0xAB: makeRES(5, mapper.state.regE),
		0xAC: makeRES(5, mapper.state.regH),
		0xAD: makeRES(5, mapper.state.regL),
		0xAE: makeRESMemHL(5),
		0xAF: makeRES(5, mapper.state.regA),
		0xB0: makeRES(6, mapper.state.regB),
		0xB1: makeRES(6, mapper.state.regC),
		0xB2: makeRES(6, mapper.state.regD),
		0xB3: makeRES(6, mapper.state.regE),
		0xB4: makeRES(6, mapper.state.regH),
		0xB5: makeRES(6, mapper.state.regL),
		0xB6: makeRESMemHL(6),
		0xB7: makeRES(6, mapper.state.regA),
		0xB8: makeRES(7, mapper.state.regB),
		0xB9: makeRES(7, mapper.state.regC),
		0xBA: makeRES(7, mapper.state.regD),
		0xBB: makeRES(7, mapper.state.regE),
		0xBC: makeRES(7, mapper.state.regH),
		0xBD: makeRES(7, mapper.state.regL),
		0xBE: makeRESMemHL(7),
		0xBF: makeRES(7, mapper.state.regA),
		0xC0: makeSET(0, mapper.state.regB),
		0xC1: makeSET(0, mapper.state.regC),
		0xC2: makeSET(0, mapper.state.regD),
		0xC3: makeSET(0, mapper.state.regE),
		0xC4: makeSET(0, mapper.state.regH),
		0xC5: makeSET(0, mapper.state.regL),
		0xC6: makeSETMemHL(0),
		0xC7: makeSET(0, mapper.state.regA),
		0xC8: makeSET(1, mapper.state.regB),
		0xC9: makeSET(1, mapper.state.regC),
		0xCA: makeSET(1, mapper.state.regD),
		0xCB: makeSET(1, mapper.state.regE),
		0xCC: makeSET(1, mapper.state.regH),
		0xCD: makeSET(1, mapper.state.regL),
		0xCE: makeSETMemHL(1),
		0xCF: makeSET(1, mapper.state.regA),
		0xD0: makeSET(2, mapper.state.regB),
		0xD1: makeSET(2, mapper.state.regC),
		0xD2: makeSET(2, mapper.state.regD),
		0xD3: makeSET(2, mapper.state.regE),
		0xD4: makeSET(2, mapper.state.regH),
		0xD5: makeSET(2, mapper.state.regL),
		0xD6: makeSETMemHL(2),
		0xD7: makeSET(2, mapper.state.regA),
		0xD8: makeSET(3, mapper.state.regB),
		0xD9: makeSET(3, mapper.state.regC),
		0xDA: makeSET(3, mapper.state.regD),
		0xDB: makeSET(3, mapper.state.regE),
		0xDC: makeSET(3, mapper.state.regH),
		0xDD: makeSET(3, mapper.state.regL),
		0xDE: makeSETMemHL(3),
		0xDF: makeSET(3, mapper.state.regA),
		0xE0: makeSET(4, mapper.state.regB),
		0xE1: makeSET(4, mapper.state.regC),
		0xE2: makeSET(4, mapper.state.regD),
		0xE3: makeSET(4, mapper.state.regE),
		0xE4: makeSET(4, mapper.state.regH),
		0xE5: makeSET(4, mapper.state.regL),
		0xE6: makeSETMemHL(4),
		0xE7: makeSET(4, mapper.state.regA),
		0xE8: makeSET(5, mapper.state.regB),
		0xE9: makeSET(5, mapper.state.regC),
		0xEA: makeSET(5, mapper.state.regD),
		0xEB: makeSET(5, mapper.state.regE),
		0xEC: makeSET(5, mapper.state.regH),
		0xED: makeSET(5, mapper.state.regL),
		0xEE: makeSETMemHL(5),
		0xEF: makeSET(5, mapper.state.regA),
		0xF0: makeSET(6, mapper.state.regB),
		0xF1: makeSET(6, mapper.state.regC),
		0xF2: makeSET(6, mapper.state.regD),
		0xF3: makeSET(6, mapper.state.regE),
		0xF4: makeSET(6, mapper.state.regH),
		0xF5: makeSET(6, mapper.state.regL),
		0xF6: makeSETMemHL(6),
		0xF7: makeSET(6, mapper.state.regA),
		0xF8: makeSET(7, mapper.state.regB),
		0xF9: makeSET(7, mapper.state.regC),
		0xFA: makeSET(7, mapper.state.regD),
		0xFB: makeSET(7, mapper.state.regE),
		0xFC: makeSET(7, mapper.state.regH),
		0xFD: makeSET(7, mapper.state.regL),
		0xFE: makeSETMemHL(7),
		0xFF: makeSET(7, mapper.state.regA),
	}
}
